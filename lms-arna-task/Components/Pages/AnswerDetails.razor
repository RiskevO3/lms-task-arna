@page "/report/details/{UserId:int}/{AssignmentId:int}"
@using System.Text.Json
@using lms_arna_task.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="container mt-4">
    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading answer details...</p>
        </div>
    }
    else if (answerDetails != null)
    {
        <div class="row mb-3">
            <div class="col-md-8">
                <h3>@answerDetails.AssignmentTitle</h3>
                <p class="text-muted">@answerDetails.AssignmentDescription</p>
            </div>
            <div class="col-md-4 text-md-end">
                <h5>@answerDetails.UserName</h5>
                <p class="text-muted">@answerDetails.UserEmail</p>
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h4 class="card-title">@answerDetails.Score%</h4>
                        <p class="card-text">Final Score</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h4 class="card-title">@answerDetails.CorrectAnswers / @answerDetails.TotalQuestions</h4>
                        <p class="card-text">Correct Answers</p>
                    </div>
                </div>
            </div>
        </div>

        <hr />

        @if (answerDetails.Answers != null)
        {
            @foreach (var answer in answerDetails.Answers)
            {
                <div class="card mb-3 @(answer.IsCorrect ? "border-success" : "border-danger")">
                    <div class="card-header">
                        <strong>@answer.QuestionText</strong>
                    </div>
                    <div class="card-body">
                        @if (answer.Options != null)
                        {
                            <ul class="list-group">
                                @for (int i = 0; i < answer.Options.Length; i++)
                                {
                                    var optionLetter = ((char)('A' + i)).ToString();
                                    var isSelected = answer.SelectedAnswer == optionLetter;
                                    var isCorrect = answer.CorrectAnswer == optionLetter;

                                    <li
                                        class="list-group-item d-flex justify-content-between align-items-center @(isCorrect ? "list-group-item-success" : (isSelected ? "list-group-item-danger" : ""))">
                                        @answer.Options[i]
                                        <div>
                                            @if (isCorrect)
                                            {
                                                <span class="badge bg-success me-2">Correct Answer</span>
                                            }
                                            @if (isSelected)
                                            {
                                                <span class="badge @(isCorrect ? "bg-primary" : "bg-danger")">Learner Answer</span>
                                            }
                                        </div>
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                </div>
            }
        }

        <div class="mt-4">
            <a href="/report" class="btn btn-secondary">Back to Report</a>
        </div>
    }
    else
    {
        <div class="alert alert-danger">
            <h4>Error</h4>
            <p>Could not load the answer details. Please try again.</p>
        </div>
    }
</div>

@code {
    [Parameter]
    public int UserId { get; set; }

    [Parameter]
    public int AssignmentId { get; set; }

    private UserAnswerDetailsDto? answerDetails;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetAsync($"/api/quiz/answers/{UserId}/{AssignmentId}");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                answerDetails = JsonSerializer.Deserialize<UserAnswerDetailsDto>(content, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading answer details: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}
