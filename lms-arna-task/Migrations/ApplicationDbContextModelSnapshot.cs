// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using lms_arna_task.Data;

#nullable disable

namespace lmsarnatask.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("lms_arna_task.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MaterialContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Assignments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 3, 10, 49, 5, 305, DateTimeKind.Utc).AddTicks(1050),
                            CreatedById = 1,
                            Description = "Learn the basics of programming concepts",
                            EndDate = new DateTime(2025, 7, 10, 10, 49, 5, 305, DateTimeKind.Utc).AddTicks(1050),
                            IsActive = true,
                            MaterialContent = "https://example.com/programming-basics.pdf",
                            MaterialType = "PDF",
                            StartDate = new DateTime(2025, 6, 26, 10, 49, 5, 305, DateTimeKind.Utc).AddTicks(1030),
                            Title = "Introduction to Programming",
                            UpdatedAt = new DateTime(2025, 7, 3, 10, 49, 5, 305, DateTimeKind.Utc).AddTicks(1050)
                        });
                });

            modelBuilder.Entity("lms_arna_task.Models.AssignmentProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("UserId", "AssignmentId")
                        .IsUnique();

                    b.ToTable("AssignmentProgresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignmentId = 1,
                            CompletedAt = new DateTime(2025, 6, 29, 3, 27, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            IsCompleted = true,
                            Score = 100,
                            StartedAt = new DateTime(2025, 6, 29, 2, 49, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            UpdatedAt = new DateTime(2025, 6, 29, 3, 27, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            AssignmentId = 1,
                            CompletedAt = new DateTime(2025, 6, 30, 10, 8, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            IsCompleted = true,
                            Score = 40,
                            StartedAt = new DateTime(2025, 6, 30, 9, 49, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            UpdatedAt = new DateTime(2025, 6, 30, 10, 8, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            UserId = 4
                        },
                        new
                        {
                            Id = 3,
                            AssignmentId = 1,
                            CompletedAt = new DateTime(2025, 7, 2, 11, 21, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            IsCompleted = true,
                            Score = 80,
                            StartedAt = new DateTime(2025, 7, 2, 10, 49, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            UpdatedAt = new DateTime(2025, 7, 2, 11, 21, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            UserId = 5
                        },
                        new
                        {
                            Id = 4,
                            AssignmentId = 1,
                            CompletedAt = new DateTime(2025, 7, 1, 23, 13, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            IsCompleted = true,
                            Score = 60,
                            StartedAt = new DateTime(2025, 7, 1, 22, 49, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            UpdatedAt = new DateTime(2025, 7, 1, 23, 13, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            UserId = 6
                        },
                        new
                        {
                            Id = 5,
                            AssignmentId = 1,
                            CompletedAt = new DateTime(2025, 6, 28, 18, 5, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            IsCompleted = true,
                            Score = 40,
                            StartedAt = new DateTime(2025, 6, 28, 17, 49, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            UpdatedAt = new DateTime(2025, 6, 28, 18, 5, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            UserId = 7
                        },
                        new
                        {
                            Id = 7,
                            AssignmentId = 1,
                            IsCompleted = false,
                            Score = 0,
                            StartedAt = new DateTime(2025, 7, 2, 19, 49, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            UpdatedAt = new DateTime(2025, 7, 2, 20, 2, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            AssignmentId = 1,
                            CompletedAt = new DateTime(2025, 6, 28, 23, 18, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            IsCompleted = true,
                            Score = 60,
                            StartedAt = new DateTime(2025, 6, 28, 22, 49, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            UpdatedAt = new DateTime(2025, 6, 28, 23, 18, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            UserId = 11
                        });
                });

            modelBuilder.Entity("lms_arna_task.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OptionA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionD")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignmentId = 1,
                            CorrectAnswer = "B",
                            CreatedAt = new DateTime(2025, 7, 3, 10, 49, 5, 305, DateTimeKind.Utc).AddTicks(1160),
                            OptionA = "A fixed value",
                            OptionB = "A container for storing data",
                            OptionC = "A function",
                            OptionD = "A loop",
                            QuestionText = "What is a variable in programming?",
                            UpdatedAt = new DateTime(2025, 7, 3, 10, 49, 5, 305, DateTimeKind.Utc).AddTicks(1160)
                        },
                        new
                        {
                            Id = 2,
                            AssignmentId = 1,
                            CorrectAnswer = "D",
                            CreatedAt = new DateTime(2025, 7, 3, 10, 49, 5, 305, DateTimeKind.Utc).AddTicks(1160),
                            OptionA = "HTML",
                            OptionB = "CSS",
                            OptionC = "JavaScript",
                            OptionD = "All of the above",
                            QuestionText = "Which of the following is a programming language?",
                            UpdatedAt = new DateTime(2025, 7, 3, 10, 49, 5, 305, DateTimeKind.Utc).AddTicks(1160)
                        },
                        new
                        {
                            Id = 3,
                            AssignmentId = 1,
                            CorrectAnswer = "B",
                            CreatedAt = new DateTime(2025, 7, 3, 10, 49, 5, 305, DateTimeKind.Utc).AddTicks(1160),
                            OptionA = "Loops through code",
                            OptionB = "Makes decisions in code",
                            OptionC = "Stores data",
                            OptionD = "Prints output",
                            QuestionText = "What does 'if' statement do?",
                            UpdatedAt = new DateTime(2025, 7, 3, 10, 49, 5, 305, DateTimeKind.Utc).AddTicks(1160)
                        },
                        new
                        {
                            Id = 4,
                            AssignmentId = 1,
                            CorrectAnswer = "A",
                            CreatedAt = new DateTime(2025, 7, 3, 10, 49, 5, 305, DateTimeKind.Utc).AddTicks(1170),
                            OptionA = "A reusable block of code",
                            OptionB = "A variable",
                            OptionC = "A loop",
                            OptionD = "A condition",
                            QuestionText = "What is a function?",
                            UpdatedAt = new DateTime(2025, 7, 3, 10, 49, 5, 305, DateTimeKind.Utc).AddTicks(1170)
                        },
                        new
                        {
                            Id = 5,
                            AssignmentId = 1,
                            CorrectAnswer = "C",
                            CreatedAt = new DateTime(2025, 7, 3, 10, 49, 5, 305, DateTimeKind.Utc).AddTicks(1170),
                            OptionA = "Writing code",
                            OptionB = "Testing code",
                            OptionC = "Finding and fixing errors",
                            OptionD = "Compiling code",
                            QuestionText = "What does debugging mean?",
                            UpdatedAt = new DateTime(2025, 7, 3, 10, 49, 5, 305, DateTimeKind.Utc).AddTicks(1170)
                        });
                });

            modelBuilder.Entity("lms_arna_task.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ManagerId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 3, 10, 49, 3, 963, DateTimeKind.Utc).AddTicks(4960),
                            Email = "manager@example.com",
                            PasswordHash = "$2a$11$8VugUlXPoBaMzcN5GTEjOOa7V8ErGXChv799qrBVBa3aWR/pmSzui",
                            Role = "Manager",
                            UpdatedAt = new DateTime(2025, 7, 3, 10, 49, 3, 963, DateTimeKind.Utc).AddTicks(4960),
                            Username = "manager"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 3, 10, 49, 4, 96, DateTimeKind.Utc).AddTicks(160),
                            Email = "learner1@example.com",
                            ManagerId = 1,
                            PasswordHash = "$2a$11$aRD8sJ/9C479v9fk0d8Amuon/lw7ga4k30/hsxN94aHALo96sb3M6",
                            Role = "Learner",
                            UpdatedAt = new DateTime(2025, 7, 3, 10, 49, 4, 96, DateTimeKind.Utc).AddTicks(160),
                            Username = "learner1"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 7, 3, 10, 49, 4, 229, DateTimeKind.Utc).AddTicks(4520),
                            Email = "learner2@example.com",
                            ManagerId = 1,
                            PasswordHash = "$2a$11$44xhAay3vTQq8LeAsaWJtO/.EAB5GN9AGARSLx6Yzv5HxKBmx0Vcq",
                            Role = "Learner",
                            UpdatedAt = new DateTime(2025, 7, 3, 10, 49, 4, 229, DateTimeKind.Utc).AddTicks(4520),
                            Username = "learner2"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 7, 3, 10, 49, 4, 361, DateTimeKind.Utc).AddTicks(2750),
                            Email = "learner3@example.com",
                            ManagerId = 1,
                            PasswordHash = "$2a$11$AAqbEKY830pfZSdN6/QosuQ4ITey0WJcTHEC2qslK1iQVzuI10Qua",
                            Role = "Learner",
                            UpdatedAt = new DateTime(2025, 7, 3, 10, 49, 4, 361, DateTimeKind.Utc).AddTicks(2750),
                            Username = "learner3"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 7, 3, 10, 49, 4, 492, DateTimeKind.Utc).AddTicks(2470),
                            Email = "learner4@example.com",
                            ManagerId = 1,
                            PasswordHash = "$2a$11$jhktvaF2o5TspPhdezXWSOZ8oxyhK.nLIjCHAu96LMppEnN9khICS",
                            Role = "Learner",
                            UpdatedAt = new DateTime(2025, 7, 3, 10, 49, 4, 492, DateTimeKind.Utc).AddTicks(2470),
                            Username = "learner4"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 7, 3, 10, 49, 4, 635, DateTimeKind.Utc).AddTicks(1380),
                            Email = "learner5@example.com",
                            ManagerId = 1,
                            PasswordHash = "$2a$11$jzdDf4qItqgcLbKi4QYn9en0sVMGarElUV84CdxQKRUEFdHpeWM26",
                            Role = "Learner",
                            UpdatedAt = new DateTime(2025, 7, 3, 10, 49, 4, 635, DateTimeKind.Utc).AddTicks(1380),
                            Username = "learner5"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 7, 3, 10, 49, 4, 768, DateTimeKind.Utc).AddTicks(1000),
                            Email = "learner6@example.com",
                            ManagerId = 1,
                            PasswordHash = "$2a$11$1kZjZsS5tq5VY5qalhjcUu186Fv8T2e.zQyQ8yHR7EJZ5xm3FLLg2",
                            Role = "Learner",
                            UpdatedAt = new DateTime(2025, 7, 3, 10, 49, 4, 768, DateTimeKind.Utc).AddTicks(1000),
                            Username = "learner6"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 7, 3, 10, 49, 4, 900, DateTimeKind.Utc).AddTicks(5270),
                            Email = "learner7@example.com",
                            ManagerId = 1,
                            PasswordHash = "$2a$11$.vKjd9//OciJEPToE.SxUeWbvuj3aY4KqPZrotcyTISaE7iRae.O2",
                            Role = "Learner",
                            UpdatedAt = new DateTime(2025, 7, 3, 10, 49, 4, 900, DateTimeKind.Utc).AddTicks(5270),
                            Username = "learner7"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 7, 3, 10, 49, 5, 36, DateTimeKind.Utc).AddTicks(5220),
                            Email = "learner8@example.com",
                            ManagerId = 1,
                            PasswordHash = "$2a$11$RzeEAWRfjsLxMd78NzGi7.wVlrOg2Vaklam/87BEnXvQLpHojVfmq",
                            Role = "Learner",
                            UpdatedAt = new DateTime(2025, 7, 3, 10, 49, 5, 36, DateTimeKind.Utc).AddTicks(5220),
                            Username = "learner8"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 7, 3, 10, 49, 5, 170, DateTimeKind.Utc).AddTicks(1240),
                            Email = "learner9@example.com",
                            ManagerId = 1,
                            PasswordHash = "$2a$11$YKlo11VuJMhClK3fJYVNOuvF6sRArZTacalxroyB92bUap3D0UF9.",
                            Role = "Learner",
                            UpdatedAt = new DateTime(2025, 7, 3, 10, 49, 5, 170, DateTimeKind.Utc).AddTicks(1240),
                            Username = "learner9"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 7, 3, 10, 49, 5, 304, DateTimeKind.Utc).AddTicks(9400),
                            Email = "learner10@example.com",
                            ManagerId = 1,
                            PasswordHash = "$2a$11$WhppKAlHk1nrQe5T4GaX9.uka2LlCefsiIiFZeM00miC0y6Up0kNy",
                            Role = "Learner",
                            UpdatedAt = new DateTime(2025, 7, 3, 10, 49, 5, 304, DateTimeKind.Utc).AddTicks(9400),
                            Username = "learner10"
                        });
                });

            modelBuilder.Entity("lms_arna_task.Models.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AnsweredAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("AssignmentProgressId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("SelectedAnswer")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentProgressId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAnswers");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            AnsweredAt = new DateTime(2025, 6, 29, 3, 22, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 1,
                            IsCorrect = true,
                            QuestionId = 1,
                            SelectedAnswer = "B",
                            UserId = 3
                        },
                        new
                        {
                            Id = 7,
                            AnsweredAt = new DateTime(2025, 6, 29, 3, 24, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 1,
                            IsCorrect = true,
                            QuestionId = 2,
                            SelectedAnswer = "D",
                            UserId = 3
                        },
                        new
                        {
                            Id = 8,
                            AnsweredAt = new DateTime(2025, 6, 29, 3, 14, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 1,
                            IsCorrect = true,
                            QuestionId = 3,
                            SelectedAnswer = "B",
                            UserId = 3
                        },
                        new
                        {
                            Id = 9,
                            AnsweredAt = new DateTime(2025, 6, 29, 3, 4, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 1,
                            IsCorrect = true,
                            QuestionId = 4,
                            SelectedAnswer = "A",
                            UserId = 3
                        },
                        new
                        {
                            Id = 10,
                            AnsweredAt = new DateTime(2025, 6, 29, 3, 26, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 1,
                            IsCorrect = true,
                            QuestionId = 5,
                            SelectedAnswer = "C",
                            UserId = 3
                        },
                        new
                        {
                            Id = 11,
                            AnsweredAt = new DateTime(2025, 6, 30, 10, 15, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 2,
                            IsCorrect = false,
                            QuestionId = 1,
                            SelectedAnswer = "C",
                            UserId = 4
                        },
                        new
                        {
                            Id = 12,
                            AnsweredAt = new DateTime(2025, 6, 30, 9, 59, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 2,
                            IsCorrect = false,
                            QuestionId = 2,
                            SelectedAnswer = "A",
                            UserId = 4
                        },
                        new
                        {
                            Id = 13,
                            AnsweredAt = new DateTime(2025, 6, 30, 10, 14, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 2,
                            IsCorrect = false,
                            QuestionId = 3,
                            SelectedAnswer = "D",
                            UserId = 4
                        },
                        new
                        {
                            Id = 14,
                            AnsweredAt = new DateTime(2025, 6, 30, 10, 6, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 2,
                            IsCorrect = true,
                            QuestionId = 4,
                            SelectedAnswer = "A",
                            UserId = 4
                        },
                        new
                        {
                            Id = 15,
                            AnsweredAt = new DateTime(2025, 6, 30, 9, 54, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 2,
                            IsCorrect = true,
                            QuestionId = 5,
                            SelectedAnswer = "C",
                            UserId = 4
                        },
                        new
                        {
                            Id = 16,
                            AnsweredAt = new DateTime(2025, 7, 2, 10, 56, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 3,
                            IsCorrect = true,
                            QuestionId = 1,
                            SelectedAnswer = "B",
                            UserId = 5
                        },
                        new
                        {
                            Id = 17,
                            AnsweredAt = new DateTime(2025, 7, 2, 10, 58, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 3,
                            IsCorrect = true,
                            QuestionId = 2,
                            SelectedAnswer = "D",
                            UserId = 5
                        },
                        new
                        {
                            Id = 18,
                            AnsweredAt = new DateTime(2025, 7, 2, 11, 5, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 3,
                            IsCorrect = false,
                            QuestionId = 3,
                            SelectedAnswer = "A",
                            UserId = 5
                        },
                        new
                        {
                            Id = 19,
                            AnsweredAt = new DateTime(2025, 7, 2, 10, 55, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 3,
                            IsCorrect = true,
                            QuestionId = 4,
                            SelectedAnswer = "A",
                            UserId = 5
                        },
                        new
                        {
                            Id = 20,
                            AnsweredAt = new DateTime(2025, 7, 2, 10, 56, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 3,
                            IsCorrect = true,
                            QuestionId = 5,
                            SelectedAnswer = "C",
                            UserId = 5
                        },
                        new
                        {
                            Id = 21,
                            AnsweredAt = new DateTime(2025, 7, 1, 23, 4, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 4,
                            IsCorrect = true,
                            QuestionId = 1,
                            SelectedAnswer = "B",
                            UserId = 6
                        },
                        new
                        {
                            Id = 22,
                            AnsweredAt = new DateTime(2025, 7, 1, 22, 56, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 4,
                            IsCorrect = false,
                            QuestionId = 2,
                            SelectedAnswer = "A",
                            UserId = 6
                        },
                        new
                        {
                            Id = 23,
                            AnsweredAt = new DateTime(2025, 7, 1, 23, 25, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 4,
                            IsCorrect = true,
                            QuestionId = 3,
                            SelectedAnswer = "B",
                            UserId = 6
                        },
                        new
                        {
                            Id = 24,
                            AnsweredAt = new DateTime(2025, 7, 1, 23, 13, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 4,
                            IsCorrect = true,
                            QuestionId = 4,
                            SelectedAnswer = "A",
                            UserId = 6
                        },
                        new
                        {
                            Id = 25,
                            AnsweredAt = new DateTime(2025, 7, 1, 22, 54, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 4,
                            IsCorrect = false,
                            QuestionId = 5,
                            SelectedAnswer = "A",
                            UserId = 6
                        },
                        new
                        {
                            Id = 26,
                            AnsweredAt = new DateTime(2025, 6, 28, 18, 12, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 5,
                            IsCorrect = false,
                            QuestionId = 1,
                            SelectedAnswer = "D",
                            UserId = 7
                        },
                        new
                        {
                            Id = 27,
                            AnsweredAt = new DateTime(2025, 6, 28, 17, 55, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 5,
                            IsCorrect = false,
                            QuestionId = 2,
                            SelectedAnswer = "B",
                            UserId = 7
                        },
                        new
                        {
                            Id = 28,
                            AnsweredAt = new DateTime(2025, 6, 28, 18, 11, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 5,
                            IsCorrect = true,
                            QuestionId = 3,
                            SelectedAnswer = "B",
                            UserId = 7
                        },
                        new
                        {
                            Id = 29,
                            AnsweredAt = new DateTime(2025, 6, 28, 18, 10, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 5,
                            IsCorrect = true,
                            QuestionId = 4,
                            SelectedAnswer = "A",
                            UserId = 7
                        },
                        new
                        {
                            Id = 30,
                            AnsweredAt = new DateTime(2025, 6, 28, 18, 17, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 5,
                            IsCorrect = false,
                            QuestionId = 5,
                            SelectedAnswer = "B",
                            UserId = 7
                        },
                        new
                        {
                            Id = 46,
                            AnsweredAt = new DateTime(2025, 6, 28, 22, 59, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 9,
                            IsCorrect = true,
                            QuestionId = 1,
                            SelectedAnswer = "B",
                            UserId = 11
                        },
                        new
                        {
                            Id = 47,
                            AnsweredAt = new DateTime(2025, 6, 28, 23, 14, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 9,
                            IsCorrect = true,
                            QuestionId = 2,
                            SelectedAnswer = "D",
                            UserId = 11
                        },
                        new
                        {
                            Id = 48,
                            AnsweredAt = new DateTime(2025, 6, 28, 23, 20, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 9,
                            IsCorrect = false,
                            QuestionId = 3,
                            SelectedAnswer = "D",
                            UserId = 11
                        },
                        new
                        {
                            Id = 49,
                            AnsweredAt = new DateTime(2025, 6, 28, 23, 16, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 9,
                            IsCorrect = true,
                            QuestionId = 4,
                            SelectedAnswer = "A",
                            UserId = 11
                        },
                        new
                        {
                            Id = 50,
                            AnsweredAt = new DateTime(2025, 6, 28, 22, 54, 5, 305, DateTimeKind.Utc).AddTicks(1300),
                            AssignmentProgressId = 9,
                            IsCorrect = false,
                            QuestionId = 5,
                            SelectedAnswer = "D",
                            UserId = 11
                        });
                });

            modelBuilder.Entity("lms_arna_task.Models.Assignment", b =>
                {
                    b.HasOne("lms_arna_task.Models.User", "CreatedBy")
                        .WithMany("CreatedAssignments")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("lms_arna_task.Models.AssignmentProgress", b =>
                {
                    b.HasOne("lms_arna_task.Models.Assignment", "Assignment")
                        .WithMany("AssignmentProgresses")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms_arna_task.Models.User", "User")
                        .WithMany("AssignmentProgresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lms_arna_task.Models.Question", b =>
                {
                    b.HasOne("lms_arna_task.Models.Assignment", "Assignment")
                        .WithMany("Questions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("lms_arna_task.Models.User", b =>
                {
                    b.HasOne("lms_arna_task.Models.User", "Manager")
                        .WithMany("Subordinates")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("lms_arna_task.Models.UserAnswer", b =>
                {
                    b.HasOne("lms_arna_task.Models.AssignmentProgress", "AssignmentProgress")
                        .WithMany("UserAnswers")
                        .HasForeignKey("AssignmentProgressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms_arna_task.Models.Question", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("lms_arna_task.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignmentProgress");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("lms_arna_task.Models.Assignment", b =>
                {
                    b.Navigation("AssignmentProgresses");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("lms_arna_task.Models.AssignmentProgress", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("lms_arna_task.Models.Question", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("lms_arna_task.Models.User", b =>
                {
                    b.Navigation("AssignmentProgresses");

                    b.Navigation("CreatedAssignments");

                    b.Navigation("Subordinates");
                });
#pragma warning restore 612, 618
        }
    }
}
